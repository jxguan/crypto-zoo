{
  "edges": [
    {
      "id": "owf-to-prg",
      "type": "construction",
      "name": "OWF to PRG Construction",
      "description": "A one-way function can be used to construct a pseudorandom generator using the Goldreich-Levin hardcore bit technique.",
      "overview": "This construction shows that if one-way functions exist, then pseudorandom generators exist. The construction uses the Goldreich-Levin hardcore bit technique to extract pseudorandom bits from a one-way function. Given a one-way function $f$, we construct a PRG $G(x,r) = (f(x), \\langle x,r \\rangle)$ where $\\langle x,r \\rangle$ is the inner product modulo 2.",
      "sourceVertices": ["owf"],
      "targetVertices": ["prg"],
      "tags": ["symmetric"],
      "model": "plain",
      "notes": "",
      "references": [
        {
          "title": "A Hard-Core Predicate for all One-Way Functions",
          "author": "Oded Goldreich and Leonid A. Levin",
          "year": 1989,
          "url": "https://doi.org/10.1145/73007.73010"
        }
      ]
    },
    {
      "id": "owf-to-hash",
      "type": "construction",
      "name": "OWF to Hash Construction",
      "description": "One-way functions can be used to construct collision-resistant hash functions using the Merkle-Damgård construction.",
      "overview": "This construction shows how to build collision-resistant hash functions from one-way functions using the Merkle-Damgård iterated construction. The construction compresses the input in stages using a compression function based on the one-way function.",
      "sourceVertices": ["owf"],
      "targetVertices": ["hash"],
      "tags": ["symmetric"],
      "model": "plain",
      "notes": "",
      "references": [
        {
          "title": "A Design Principle for Hash Functions",
          "author": "Ralph C. Merkle",
          "year": 1989,
          "url": "https://doi.org/10.1007/0-387-34805-0_39"
        }
      ]
    },
    {
      "id": "prg-to-prf",
      "type": "construction",
      "name": "PRG to PRF Construction",
      "description": "A pseudorandom generator can be used to construct a pseudorandom function using the GGM construction.",
      "overview": "The Goldreich-Goldwasser-Micali (GGM) construction shows how to build a pseudorandom function from a pseudorandom generator. The construction uses the PRG to build a tree structure where each node represents a function evaluation. Given a PRG $G: \\{0,1\\}^n \\rightarrow \\{0,1\\}^{2n}$, we define $F_k(x) = G_{x_n}(G_{x_{n-1}}(\\cdots G_{x_1}(k) \\cdots))$ where $G_0$ and $G_1$ are the left and right halves of $G$'s output.",
      "sourceVertices": ["prg"],
      "targetVertices": ["prf"],
      "tags": ["symmetric"],
      "model": "plain",
      "notes": "",
      "references": [
        {
          "title": "How to Construct Random Functions",
          "author": "Oded Goldreich, Shafi Goldwasser, and Silvio Micali",
          "year": 1986,
          "url": "https://doi.org/10.1145/12130.12134"
        }
      ]
    },
    {
      "id": "prf-to-mac",
      "type": "construction",
      "name": "PRF to MAC Construction",
      "description": "A pseudorandom function can be used directly as a message authentication code.",
      "overview": "This is a simple construction where a pseudorandom function is used directly as a message authentication code. The security of the MAC follows directly from the pseudorandomness of the PRF.",
      "sourceVertices": ["prf"],
      "targetVertices": ["mac"],
      "tags": ["symmetric"],
      "model": "plain",
      "notes": "",
      "references": [
        {
          "title": "Message Authentication Codes",
          "author": "Mihir Bellare, Ran Canetti, and Hugo Krawczyk",
          "year": 1996,
          "url": "https://doi.org/10.1007/3-540-68697-5_1"
        }
      ]
    },
    {
      "id": "hash-to-mac",
      "type": "construction",
      "name": "Hash to MAC Construction",
      "description": "A cryptographic hash function can be used to construct a message authentication code using HMAC.",
      "overview": "The HMAC construction shows how to build a message authentication code from a cryptographic hash function. HMAC uses the hash function in a specific way to provide security even if the underlying hash function has weaknesses.",
      "sourceVertices": ["hash"],
      "targetVertices": ["mac"],
      "tags": ["symmetric"],
      "model": "random oracle",
      "notes": "",
      "references": [
        {
          "title": "HMAC: Keyed-Hashing for Message Authentication",
          "author": "Mihir Bellare, Ran Canetti, and Hugo Krawczyk",
          "year": 1996,
          "url": "https://doi.org/10.17487/RFC2104"
        }
      ]
    },
    {
      "id": "pke-to-ke",
      "type": "construction",
      "name": "PKE to KE Construction",
      "description": "A public-key encryption scheme can be used to construct a key exchange protocol trivially. In particular, a PKE scheme is in essence a 2 message KE protocol.",
      "overview": "The 2 message KE protocol given by any PKE scheme $(\\operatorname{Gen}, \\operatorname{Enc}, \\operatorname{Dec})$ acts as follows. The first party, Alice, will run $\\operatorname{Gen}\\to (pk, sk)$, and sends $pk$ to Bob. Bob picks a random message $m$, and sends $\\operatorname{Enc}_{pk}(m) \\to c$ to Alice. Alice then outputs $\\operatorname{Dec}_{sk}(c)$, and Bob outputs $m$ directly.\n\nCorrectness follows from the fact that $\\operatorname{Dec}_{sk}(c) = m$ by correctness of the PKE. Security follows from IND-CPA security of the PKE.",
      "sourceVertices": [
        "pke"
      ],
      "targetVertices": [
        "ke"
      ],
      "tags": [
        "public key",
        "foundational",
        "trivial"
      ],
      "model": "plain",
      "references": [],
      "notes": ""
    }
  ]
} 